commands:
  ssh-deployment:
    description: |
      Deploying...
    parameters:
      ssh-user:
        type: string
      ssh-host:
        type: string
      git-repo:
        type: string
      git-branch:
        type: string
      service-name:
        type: string
      service-dir:
        type: string
      mainnet-port:
        type: string
      testnet-port:
        type: string
      run-command:
        type: string
      test-command:
        type: string
      docker-file-url:
        type: string
      docker-no-cache:
        type: boolean
      docker-image:
        type: string
      docker-container:
        type: string
      docker-nvidia:
        type: boolean
      docker-volume:
        type: boolean
        default: false
      docker-vol-src:
        type: string
      docker-vol-dst:
        type: string
      infura-api-key:
        type: string
      daemon-pk:
        type: string
    steps:
      - run:
          name: Setting Up
          command: |
            export SSH_USER=<< parameters.ssh-user >>
            export SSH_HOST=<< parameters.ssh-host >>
            export GIT_USER=${CIRCLE_PROJECT_USERNAME}
            export GIT_REPO=<< parameters.git-repo >>
            export GIT_BRANCH=<< parameters.git-branch >>
            export DOCKER_CONTAINER=<< parameters.docker-container >>
            export DOCKER_DEPLOY=$([ "${GIT_USER}"/"${GIT_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Setting Up..."
            echo $(.circleci/check_md5.sh) >> docker_rebuild
            echo "FILES_CHANGED=$(cat docker_rebuild)"

      - run:
          name: Removing old Docker Container (Previous Builds)
          command: |
            export SSH_USER=<< parameters.ssh-user >>
            export SSH_HOST=<< parameters.ssh-host >>
            export GIT_USER=${CIRCLE_PROJECT_USERNAME}
            export GIT_REPO=<< parameters.git-repo >>
            export GIT_BRANCH=<< parameters.git-branch >>
            export DOCKER_IMAGE=<< parameters.docker-image >>
            export DOCKER_CONTAINER=<< parameters.docker-container >>
            export DOCKER_DEPLOY=$([ "${GIT_USER}"/"${GIT_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo "Removing old Container (from previous builds)..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker stop ${PROD_TAG}${DOCKER_CONTAINER}_old || true
              docker rm ${PROD_TAG}${DOCKER_CONTAINER}_old || true
            EOF

      - run:
          name: Building
          command: |
            echo "=========================================== Build Configs ==========================================="
            export SSH_USER=<< parameters.ssh-user >>
            export SSH_HOST=<< parameters.ssh-host >>
            export GIT_USER=${CIRCLE_PROJECT_USERNAME}
            export GIT_REPO=<< parameters.git-repo >>
            export GIT_BRANCH=<< parameters.git-branch >>
            export DOCKER_NOCACHE=<< parameters.docker-no-cache >>
            export DOCKER_IMAGE=<< parameters.docker-image >>
            export DOCKER_CONTAINER=<< parameters.docker-container >>
            export DOCKER_FILE_URL=<< parameters.docker-file-url >>
            export DOCKER_DEPLOY=$([ "${GIT_USER}"/"${GIT_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            echo            git_user  : ${GIT_USER}
            echo            git_repo  : ${GIT_REPO}
            echo            git_branch: ${GIT_BRANCH}
            echo SSH_USER             : ${SSH_USER}
            echo SSH_HOST             : ${SSH_HOST}
            echo DOCKER_NOCACHE       : ${DOCKER_NOCACHE}
            echo DOCKER_IMAGE         : ${DOCKER_IMAGE}
            echo DOCKER_CONTAINER     : ${DOCKER_CONTAINER}
            echo DOCKER_FILE_URL      : ${DOCKER_FILE_URL}
            echo "====================================================================================================="
            DOCKER_IMAGE_EXISTS=`ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} docker images -q ${DOCKER_IMAGE}:${GIT_USER}`
            FILES_CHANGED=`cat docker_rebuild`
            echo DOCKER_IMAGE_EXISTS=${DOCKER_IMAGE_EXISTS}
            echo FILES_CHANGED=${FILES_CHANGED}
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              if [ "$DOCKER_IMAGE_EXISTS" = "" ] || [ "$FILES_CHANGED" != 0 ]; then
                echo "Building..."
                docker build \
                  --build-arg git_owner=${GIT_USER} \
                  --build-arg git_repo=${GIT_REPO} \
                  --build-arg git_branch=${GIT_BRANCH} \
                  $([ "${DOCKER_NOCACHE}" = "true" ] && echo "--no-cache" || echo "") \
                  -t ${DOCKER_IMAGE}:${GIT_USER} ${DOCKER_FILE_URL}
              else
                echo "Not Building..."
              fi
            EOF

      - run:
          name: Running new Docker Container
          command: |
            echo "============================================ Run Configs ============================================"
            export SSH_USER=<< parameters.ssh-user >>
            export SSH_HOST=<< parameters.ssh-host >>
            export GIT_USER=${CIRCLE_PROJECT_USERNAME}
            export GIT_REPO=<< parameters.git-repo >>
            export GIT_BRANCH=<< parameters.git-branch >>
            export INFURA_API_KEY=<< parameters.infura-api-key >>
            export PVT_KEY_FOR_METERING=<< parameters.daemon-pk >>
            export DOCKER_NVIDIA=<< parameters.docker-nvidia >>
            export DOCKER_IMAGE=<< parameters.docker-image >>
            export DOCKER_CONTAINER=<< parameters.docker-container >>
            export MAINNET_PORT= << parameters.mainnet-port >>
            export TESTNET_PORT= << parameters.testnet-port >>
            export DOCKER_VOLUME=<< parameters.docker-volume >>
            export DOCKER_VOLUME_SRC=<< parameters.docker-vol-src >>
            export DOCKER_VOLUME_DST=<< parameters.docker-vol-dst >>
            export DOCKER_DEPLOY=$([ "${GIT_USER}"/"${GIT_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            export SERVICE_RUN_COMMAND=<< parameters.run-command >>
            echo        git_user  : ${GIT_USER}
            echo        git_repo  : ${GIT_REPO}
            echo        git_branch: ${GIT_BRANCH}
            echo SSH_USER         : ${SSH_USER}
            echo SSH_HOST         : ${SSH_HOST}
            echo DOCKER_NOCACHE   : ${DOCKER_NOCACHE}
            echo DOCKER_NVIDIA    : ${DOCKER_NVIDIA}
            echo DOCKER_IMAGE     : ${DOCKER_IMAGE}
            echo DOCKER_CONTAINER : ${DOCKER_CONTAINER}
            echo MAINNET_PORT     : ${MAINNET_PORT}
            echo TESTNET_PORT     : ${TESTNET_PORT}
            echo DOCKER_VOLUME    : ${DOCKER_VOLUME}
            echo DOCKER_VOLUME_SRC: ${DOCKER_VOLUME_SRC}
            echo DOCKER_VOLUME_DST: ${DOCKER_VOLUME_DST}
            echo "====================================================================================================="
            echo "Running new Container..."
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<<-EOF
                  docker stop ${PROD_TAG}${DOCKER_CONTAINER} || true
                  docker rename ${PROD_TAG}${DOCKER_CONTAINER} ${PROD_TAG}${DOCKER_CONTAINER}_old || true
                  docker run \
                  $([ "${DOCKER_NVIDIA}" = "true" ] && echo "--runtime=nvidia" || echo "") \
                  --name ${PROD_TAG}${DOCKER_CONTAINER} \
                  --restart unless-stopped \
                  -e INFURA_API_KEY=${INFURA_API_KEY} \
                  -e PVT_KEY_FOR_METERING=${PVT_KEY_FOR_METERING} \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${MAINNET_PORT}:${MAINNET_PORT}" || echo "") \
                  $([ "${DOCKER_DEPLOY}" = "true" ] && echo "-p ${TESTNET_PORT}:${TESTNET_PORT}" || echo "") \
                  $([ "${DOCKER_VOLUME}" = "true" ] && echo "-v ${DOCKER_VOLUME_SRC}:${DOCKER_MOUNT_DST}" || echo "") \
                  -tdi ${DOCKER_IMAGE}:${GIT_USER} \
                  bash -c "git fetch;git checkout ${GIT_BRANCH};git pull;sh buildproto.sh;${SERVICE_RUN_COMMAND}"
            EOF

      - run:
          name: Testing local
          no_output_timeout: 60m
          command: |
            export SSH_USER=<< parameters.ssh-user >>
            export SSH_HOST=<< parameters.ssh-host >>
            export GIT_USER=${CIRCLE_PROJECT_USERNAME}
            export GIT_REPO=<< parameters.git-repo >>
            export GIT_BRANCH=<< parameters.git-branch >>
            export DOCKER_IMAGE=<< parameters.docker-image >>
            export DOCKER_CONTAINER=<< parameters.docker-container >>
            export DOCKER_DEPLOY=$([ "${GIT_USER}"/"${GIT_BRANCH}" = "singnet/master" ] && echo "true" || echo "false")
            export PROD_TAG=$([ "${DOCKER_DEPLOY}" = "true" ] && echo "PROD_" || echo "")
            export SERVICE_TEST_COMMAND=<< parameters.test-command >>
            ssh -o "StrictHostKeyChecking no" ${SSH_USER}@${SSH_HOST} \<< EOF
              docker exec -i ${PROD_TAG}${DOCKER_CONTAINER} bash -c "${SERVICE_TEST_COMMAND}"
            EOF

description: |
  Orb to build and deploy a Docker container on a remote server using SSH.
display:
  home_url: https://github.com/arturgontijo
  source_url: https://github.com/arturgontijo/ci-research
examples:
  deploy_application:
    description: |
      Example of using the orb.
    usage:
      orbs:
        ssh-deployment: arturgontijo/ssh-deployment@0.0.1
      version: 2.1
      workflows:
        deploy_application:
          jobs:
          - ssh-deployment/deploy:
              ssh-host: "localhost"
              ssh-user: "ubuntu"
              extras: "ls -shla"

jobs:
  deploy:
    description: Deploy a Docker image from a Github repository on a remote server using SSH.
    docker:
      - image: circleci/python:3.6.6-node
    parameters:
      ssh-user:
        description: The remote SSH username.
        type: string
      ssh-host:
        description: The remote SSH host.
        type: string
      git-repo:
        description: The Github repository name.
        type: string
        default: ${CIRCLE_PROJECT_REPONAME}
      git-branch:
        description: The Github branch name.
        type: string
        default: ${CIRCLE_BRANCH}
      service-name:
        description: The service name.
        type: string
      service-dir:
        description: The service directory.
        type: string
      mainnet-port:
        description: The service post (Mainnet).
        type: string
      testnet-port:
        description: The service post (Testnet).
        type: string
        default: ""
      run-command:
        description: The service run command.
        type: string
      test-command:
        description: The service test command.
        type: string
      docker-file-url:
        description: The URL of the Dockerfile.
        type: string
      docker-no-cache:
        description: The build the Docker image without cache.
        type: boolean
        default: false
      docker-image:
        description: The name of the Docker images that will be built.
        type: string
      docker-container:
        description: The name of the Docker container that will be started.
        type: string
      docker-nvidia:
        description: Starts the container with "--runtime=nvidia".
        type: boolean
        default: false
      docker-volume:
        description: Starts the container with volume map (-v).
        type: boolean
        default: false
      docker-vol-src:
        description: Source directory outside the container.
        type: string
        default: ""
      docker-vol-dst:
        description: Destination directory inside the container.
        type: string
        default: ""
      infura-api-key:
        description: The key to access Infura API.
        type: string
        default: ""
      daemon-pk:
        description: The private key of Daemon post to metering server.
        type: string
        default: ""
    steps:
    - checkout
    - ssh-deployment:
        ssh-user: << parameters.ssh-user >>
        ssh-host: << parameters.ssh-host >>
        git-repo: << parameters.git-repo >>
        git-branch: << parameters.git-branch >>
        service-name: << parameters.service-name >>
        service-dir: << parameters.service-dir >>
        mainnet-port: << parameters.mainnet-port >>
        testnet-port: << parameters.testnet-port >>
        run-command: << parameters.run-command >>
        test-command: << parameters.test-command >>
        docker-file-url: << parameters.docker-file-url >>
        docker-no-cache: << parameters.docker-no-cache >>
        docker-image: << parameters.docker-image >>
        docker-container: << parameters.docker-container >>
        docker-nvidia: << parameters.docker-nvidia >>
        docker-volume: << parameters.docker-volume >>
        docker-vol-src: << parameters.docker-vol-src >>
        docker-vol-dst: << parameters.docker-vol-dst >>
        infura-api-key: << parameters.infura-api-key >>
        daemon-pk: << parameters.daemon-pk >>

version: 2.1
